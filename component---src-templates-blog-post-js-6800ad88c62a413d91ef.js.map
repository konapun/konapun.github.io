{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","pageContext","post","markdownRemark","allPosts","allMarkdownRemark","previous","next","setNavigation","useContext","NavContext","nav","id","href","edges","map","node","fields","slug","frontmatter","useEffect","className","excerpt","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","pageQuery"],"mappings":"qJAYMA,EAAM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAD0C,OAC1CA,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,OAAOC,SAEpC,CACEJ,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,mqCCnFA,sBAA4B,IAAzBiB,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACEC,EAAsCF,EAAtDG,eAAyCC,EAAaJ,EAAhCK,kBACtBC,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KACVC,EAAkBC,qBAAWC,KAA7BF,cAEFG,EAAG,CACP,CACEC,GAAI,OACJnB,KAAM,OACNoB,KAAM,KAER,CACED,GAAI,OACJnB,KAAM,YACNoB,KAAM,UATD,SAWJT,EAASU,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CACnCJ,GAAII,EAAKC,OAAOC,KAChBzB,KAAMuB,EAAKG,YAAYhC,MACvB0B,KAAK,QAASG,EAAKC,OAAOC,WAQ9B,OAJAE,qBAAU,WACRZ,EAAcG,KACb,CAAEA,EAAKH,IAGR,yBAAKa,UAAU,YACb,kBAAC,IAAD,CACElC,MAAOe,EAAKiB,YAAYhC,MACxBH,YAAakB,EAAKiB,YAAYnC,aAAekB,EAAKoB,UAEpD,iCACE,4BAAQD,UAAU,QAChB,4BACGnB,EAAKiB,YAAYhC,OAEnBe,EAAKiB,YAAYnC,aAChB,4BACGkB,EAAKiB,YAAYnC,aAGtB,2BACGkB,EAAKiB,YAAYI,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQvB,EAAKwB,SAGnD,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG1B,GACC,kBAAC,OAAD,CAAM2B,GAAE,SAAW3B,EAASW,OAAOC,KAAQgB,IAAI,QAA/C,KACK5B,EAASa,YAAYhC,QAI9B,4BACGoB,GACC,kBAAC,OAAD,CAAM0B,GAAE,SAAW1B,EAAKU,OAAOC,KAAQgB,IAAI,QACxC3B,EAAKY,YAAYhC,MADpB,WAWP,IAAMgD,EAAS","file":"component---src-templates-blog-post-js-6800ad88c62a413d91ef.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React, { useContext, useEffect } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport NavContext from '../components/nav/NavContext'\n\nimport SEO from '../components/SEO'\n\nexport default ({ data, pageContext }) => {\n  const { markdownRemark: post, allMarkdownRemark: allPosts } = data\n  const { previous, next } = pageContext\n  const { setNavigation } = useContext(NavContext)\n\n  const nav = [ // FIXME: this is duplicated in the blog landing page. clean this up\n    {\n      id: 'home',\n      name: 'Home',\n      href: '/'\n    },\n    {\n      id: 'blog',\n      name: 'All Posts',\n      href: '/blog'\n    },\n    ...allPosts.edges.map(({ node }) => ({\n      id: node.fields.slug,\n      name: node.frontmatter.title,\n      href: `/blog${node.fields.slug}`\n    }))\n  ]\n\n  useEffect(() => {\n    setNavigation(nav)\n  }, [ nav, setNavigation ])\n\n  return (\n    <div className=\"mt-5 p-5\">\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header className=\"mb-5\">\n          <h1>\n            {post.frontmatter.title}\n          </h1>\n          {post.frontmatter.description && (\n            <h4>\n              {post.frontmatter.description}\n            </h4>\n          )}\n          <p>\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={`/blog/${previous.fields.slug}`} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={`/blog/${next.fields.slug}`} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}