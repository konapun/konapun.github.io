{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/using-proxy-objects/","result":{"data":{"markdownRemark":{"id":"de9529cf-eee9-50ee-b71d-b3fcf25a260c","excerpt":"Recently, someone asked on a programming subreddit if there was a way in a node\nExpress app to reduce duplicated error handling logic when specifying route…","html":"<p>Recently, someone asked on a programming subreddit if there was a way in a node\nExpress app to reduce duplicated error handling logic when specifying route handlers.</p>\n<p>There are a number of good Express-provided ways or design solutions to address this issue\nbut I wondered if I could come up with a solution using a Proxy.</p>\n<p>The gist of the problem was this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/one'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">some_code_which_may_throw_an_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// code which may throw errors, including database operations</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/two'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">some_more_code_which_may_throw_an_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// code which may throw errors, including database operations</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// and so on...</span></code></pre></div>\n<p>Those of you that are familiar with Express may know about custom middleware that\ncould be used to handle errors in a uniform way and I agree that this is the better\nsolution. However, the point of this for me was more of a puzzle.</p>\n<h2>What is a Proxy in Javascript?</h2>\n<p><a href=\"Proxies\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a> were added\nin ES6 as a way of specifying traps for an object. That is, ways you can hook into a defined object to\nintercept calls and provide your own code to run. There are many practical uses for proxies but here we’ll\nbe using it as a tool to solve the problem stated above.</p>\n<h2>A Solution</h2>\n<p>Given what we know about proxies, we can see a potential solution in trapping the route handler and adding\nthe error handling there. Let’s design our solution as a wrapper function called <code class=\"language-text\">proxyRouter</code> which takes\nan Express router:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">proxyRouter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">router</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'patch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3>Let’s break it down!</h3>\n<p>The first thing to notice is our Proxy definition. The first argument to Proxy is the <code class=\"language-text\">target</code> object we want\nto proxy, which is the Express router. The second argument is the <code class=\"language-text\">handler</code> which specifies our hooks. <code class=\"language-text\">get</code>\nis invoked upon property access on our target which includes methods as well. Here, <code class=\"language-text\">target</code> is our object and\n<code class=\"language-text\">prop</code> is the property being accessed.</p>\n<p>For our purposes, we want to provide our own implementations for all the HTTP verbs while leaving any other\nproperties untouched:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'patch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span></code></pre></div>\n<p>But if the property IS an HTTP verb, we need to return a new function which includes our extra logic. Remember\nthat the signature for <code class=\"language-text\">router.post</code>, <code class=\"language-text\">router.put</code>, etc. is <code class=\"language-text\">(route, handler)</code> which we can see in the specification\nof the original problem at the beginning of this post. We want to provide an alternate implementation for this\nfunction that includes the error handling bits we care about:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is the handler function the user passes</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3>Using our proxy object</h3>\n<p>So how would we use this? Easy!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">proxyRouter</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">some_code_which_may_throw_an_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// We no longer need to put it in a try/catch!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It works!</p>\n<p>Because the call to <code class=\"language-text\">post</code> is running through the proxy, error handling is already taken care of!</p>\n<p>Again, this isn’t necessarily the best solution but it’s definitely a problem that can be solved using a\nProxy and Proxies are awesome!</p>","frontmatter":{"title":"Using Proxy Objects","date":"June 16, 2020","description":"A problem and solution using a Proxy"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Recently, someone asked on a programming subreddit if there was a way in a node\nExpress app to reduce duplicated error handling logic when…","fields":{"slug":"/using-proxy-objects/"},"frontmatter":{"date":"June 16, 2020","title":"Using Proxy Objects","description":"A problem and solution using a Proxy"}}},{"node":{"excerpt":"After years of on and off work, Orbital Frame has been released to npm as an alpha! For full details, check out the GitHub repo and try an…","fields":{"slug":"/introducing-orbital-frame/"},"frontmatter":{"date":"May 15, 2020","title":"Introducing Orbital Frame","description":"Unleash the power of UNIX in your chatbot!"}}},{"node":{"excerpt":"Figured I’d throw a quick site together to host project demos. This site is\npowered by Gatsby and is based on a modified mashup of\ngatsby…","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"April 19, 2020","title":"Hello World","description":"A bit about this site"}}}]}},"pageContext":{"slug":"/using-proxy-objects/","previous":{"fields":{"slug":"/introducing-orbital-frame/"},"frontmatter":{"title":"Introducing Orbital Frame"}},"next":null}}}