{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/layout/BlogLayout.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","posts","seo","children","useNavigation","id","href","map","node","fields","slug","frontmatter","className","data","pageContext","post","markdownRemark","allPosts","allMarkdownRemark","previous","next","edges","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","pageQuery"],"mappings":"0cAYMA,EAAM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAD0C,OAC1CA,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,OAAOC,SAEpC,CACEJ,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,Q,0uBCrFA,gBAAoC,IAAD,IAAhCiB,aAAgC,MAAxB,GAAwB,EAApBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAcjC,OAbAC,YAAc,CACZ,CACEC,GAAI,OACJX,KAAM,OACNY,KAAM,MAJG,SAMRL,EAAMM,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CAC1BH,GAAIG,EAAKC,OAAOC,KAChBhB,KAAMc,EAAKG,YAAYvB,MACvBkB,KAAK,QAASE,EAAKC,OAAOC,YAK5B,yBAAKE,UAAU,YACb,kBAAC,EAAD,CAAKxB,MAAOc,IACXC,K,kCCrBP,kGAIe,sBAA4B,IAAzBU,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACEC,EAAsCF,EAAtDG,eAAyCC,EAAaJ,EAAhCK,kBACtBC,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KAEZhC,EAAQ2B,EAAKJ,YAAYvB,MAC/B,OACE,kBAAC,IAAD,CAAYa,MAAOgB,EAASI,MAAOnB,IAAKd,GACtC,iCACE,4BAAQwB,UAAU,QAChB,4BACGG,EAAKJ,YAAYvB,OAEnB2B,EAAKJ,YAAY1B,aAChB,4BACG8B,EAAKJ,YAAY1B,aAGtB,2BACG8B,EAAKJ,YAAYW,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQT,EAAKU,SAGnD,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGZ,GACC,kBAAC,OAAD,CAAMa,GAAE,SAAWb,EAASV,OAAOC,KAAQuB,IAAI,QAA/C,KACKd,EAASR,YAAYvB,QAI9B,4BACGgC,GACC,kBAAC,OAAD,CAAMY,GAAE,SAAWZ,EAAKX,OAAOC,KAAQuB,IAAI,QACxCb,EAAKT,YAAYvB,MADpB,WAWP,IAAM8C,EAAS","file":"component---src-templates-blog-post-js-710c8fed7f1f83de612d.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport useNavigation from '../nav/useNavigation'\nimport SEO from '../SEO'\n\nexport default ({ posts = [], seo, children }) => {\n  useNavigation([\n    {\n      id: 'home',\n      name: 'Home',\n      href: '/'\n    },\n    ...posts.map(({ node }) => ({\n      id: node.fields.slug,\n      name: node.frontmatter.title,\n      href: `/blog${node.fields.slug}`\n    }))\n  ])\n\n  return (\n    <div className=\"mt-5 p-5\">\n      <SEO title={seo}/>\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport BlogLayout from '../components/layout/BlogLayout'\n\nexport default ({ data, pageContext }) => {\n  const { markdownRemark: post, allMarkdownRemark: allPosts } = data\n  const { previous, next } = pageContext\n\n  const title = post.frontmatter.title\n  return (\n    <BlogLayout posts={allPosts.edges} seo={title}>\n      <article>\n        <header className=\"mb-5\">\n          <h1>\n            {post.frontmatter.title}\n          </h1>\n          {post.frontmatter.description && (\n            <h4>\n              {post.frontmatter.description}\n            </h4>\n          )}\n          <p>\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={`/blog/${previous.fields.slug}`} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={`/blog/${next.fields.slug}`} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </BlogLayout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}