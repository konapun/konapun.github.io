{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/layout/BlogLayout.js","webpack:///./src/pages/blog.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","posts","seo","children","useNavigation","id","href","map","node","fields","slug","frontmatter","className","data","allMarkdownRemark","group","edges","key","style","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","pageQuery"],"mappings":"0cAYMA,EAAM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAD0C,OAC1CA,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,OAAOC,SAEpC,CACEJ,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,Q,0uBCrFA,gBAAoC,IAAD,IAAhCiB,aAAgC,MAAxB,GAAwB,EAApBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAcjC,OAbAC,YAAc,CACZ,CACEC,GAAI,OACJX,KAAM,OACNY,KAAM,MAJG,SAMRL,EAAMM,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CAC1BH,GAAIG,EAAKC,OAAOC,KAChBhB,KAAMc,EAAKG,YAAYvB,MACvBkB,KAAK,QAASE,EAAKC,OAAOC,YAK5B,6BAASE,UAAU,mBACjB,kBAAC,EAAD,CAAKxB,MAAOc,EAAKU,UAAU,SAC1BT,K,kCCrBP,kGAIe,sBAAe,IAAZU,EAAW,EAAXA,KAEVZ,GADOY,EAAKC,kBAAkBC,MACtBF,EAAKC,kBAAkBE,OAGrC,OACE,kBAAC,IAAD,CAAYf,MAAOA,EAAOC,IAFd,aAGV,4BAHU,aAITD,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNpB,EAAQoB,EAAKG,YAAYvB,OAASoB,EAAKC,OAAOC,KACpD,OACE,6BAASO,IAAKT,EAAKC,OAAOC,MACxB,gCACE,4BACE,kBAAC,OAAD,CAAMQ,MAAO,CAAEC,UAAU,QAAWC,GAAE,QAAUZ,EAAKC,OAAOC,MAA5D,IACGtB,IAGL,+BAAQoB,EAAKG,YAAYU,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQf,EAAKG,YAAY1B,aAAeuB,EAAKgB,kBAWxD,IAAMC,EAAS","file":"component---src-pages-blog-js-4fe580d5ad889cc32e57.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport useNavigation from '../nav/useNavigation'\nimport SEO from '../SEO'\n\nexport default ({ posts = [], seo, children }) => {\n  useNavigation([\n    {\n      id: 'home',\n      name: 'Home',\n      href: '/'\n    },\n    ...posts.map(({ node }) => ({\n      id: node.fields.slug,\n      name: node.frontmatter.title,\n      href: `/blog${node.fields.slug}`\n    }))\n  ])\n\n  return (\n    <section className=\"content-section\">\n      <SEO title={seo} className=\"mb-0\"/>\n      {children}\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport BlogLayout from '../components/layout/BlogLayout'\n\nexport default ({ data }) => {\n  const tags = data.allMarkdownRemark.group // TODO: use these\n  const posts = data.allMarkdownRemark.edges\n\n  const title = 'All Posts'\n  return (\n    <BlogLayout posts={posts} seo={title}>\n      <h2>{title}</h2>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3>\n                <Link style={{ boxShadow: `none` }} to={`/blog${node.fields.slug}`}> {/* FIXME */}\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </BlogLayout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}