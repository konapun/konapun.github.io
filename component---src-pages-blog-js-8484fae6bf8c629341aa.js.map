{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/pages/blog.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","posts","allMarkdownRemark","group","edges","setNavigation","useContext","NavContext","nav","id","href","map","node","fields","slug","frontmatter","useEffect","className","key","style","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","pageQuery"],"mappings":"qJAYMA,EAAM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAD0C,OAC1CA,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,OAAOC,SAEpC,CACEJ,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,mqCCpFA,sBAAe,IAAZiB,EAAW,EAAXA,KAEVC,GADOD,EAAKE,kBAAkBC,MACtBH,EAAKE,kBAAkBE,OAC7BC,EAAkBC,qBAAWC,KAA7BF,cAEFG,EAAG,CACP,CACEC,GAAI,OACJhB,KAAM,OACNiB,KAAM,MAJD,SAMJT,EAAMU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CAC1BH,GAAIG,EAAKC,OAAOC,KAChBrB,KAAMmB,EAAKG,YAAY5B,MACvBuB,KAAK,QAASE,EAAKC,OAAOC,WAQ9B,OAJAE,qBAAU,WACRX,EAAcG,KACb,CAAEH,EAAeG,IAGlB,yBAAKS,UAAU,YACb,kBAAC,IAAD,CAAK9B,MAAM,cACX,yCACCc,EAAMU,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNzB,EAAQyB,EAAKG,YAAY5B,OAASyB,EAAKC,OAAOC,KACpD,OACE,6BAASI,IAAKN,EAAKC,OAAOC,MACxB,gCACE,4BACE,kBAAC,OAAD,CAAMK,MAAO,CAAEC,UAAU,QAAWC,GAAE,QAAUT,EAAKC,OAAOC,MAA5D,IACG3B,IAGL,+BAAQyB,EAAKG,YAAYO,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKG,YAAY/B,aAAe4B,EAAKa,kBAWxD,IAAMC,EAAS","file":"component---src-pages-blog-js-8484fae6bf8c629341aa.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React, { useContext, useEffect } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport NavContext from '../components/nav/NavContext'\nimport SEO from '../components/SEO'\n\nexport default ({ data }) => {\n  const tags = data.allMarkdownRemark.group // TODO: use these\n  const posts = data.allMarkdownRemark.edges\n  const { setNavigation } = useContext(NavContext)\n\n  const nav = [\n    {\n      id: 'home',\n      name: 'Home',\n      href: '/'\n    },\n    ...posts.map(({ node }) => ({\n      id: node.fields.slug,\n      name: node.frontmatter.title,\n      href: `/blog${node.fields.slug}`\n    }))\n  ]\n\n  useEffect(() => {\n    setNavigation(nav)\n  }, [ setNavigation, nav ])\n\n  return (\n    <div className=\"mt-5 p-5\">\n      <SEO title='All posts'/>\n      <h2>All Posts</h2>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3>\n                <Link style={{ boxShadow: `none` }} to={`/blog${node.fields.slug}`}> {/* FIXME */}\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}